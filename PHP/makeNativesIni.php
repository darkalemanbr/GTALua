<?php
#
# This reads the natives.h and generates the natives.ini used by GTALua for declaring the hashes
# used by the LUA calls to ScripthookV and the native_call_layout.ini which describes the layout
# of parameters to be passed on to the calls.
#

function translate($item)
{
	switch(strtolower($item))
	{
		case "":
			$result="";		// It's a "nil"
			break;
		case "any":
		case "scrhandle":
			$result="a";	// It's an "any"
			break;
		case "bool":
			$result="b";	// It's a boolean
			break;
		case "float":
			$result="f";	// It's a float
			break;
		case "blip":		
		case "cam":
		case "entity":
		case "hash":
		case "int":
		case "object":
		case "ped":
		case "pickup":
		case "player":
		case "vehicle":
			$result="i";	// It's an integer
			break;
		case "any*":
		case "blip*":
		case "bool*":
		case "entity*":
		case "float*":
		case "hash*":
		case "int*":
		case "object*":
		case "ped*":
		case "player*":
		case "scrhandle*":
		case "vector3*":
		case "vehicle*":
			$result="m";	// It's a pointer
			break;
		case "char*":
			$result="s";	// It's a string
			break;
		case "vector3":
			$result="V";	// It's a vector
			break;
		case "void":
			$result="v";	// It's a void
			break;
		default:
			$result="?($item)";	// It's a trap!!!
			echo("\nFound an invalid item: $item\n");
			break;
	}

	return($result);
}

	if(!isset($argv[1]))
		die("Usage: ".$argv[0]." <native.h file>\n");

	$filename=$argv[1];
	if(file_exists($filename))
	{
		echo("Generating .ini files from $filename...");
		$filein=fopen($filename, "r");
		$fileout=fopen("natives.ini", "w");
		$fileout2=fopen("native_call_layout.ini", "w");
# ini file top comments
		fputs($fileout, "; generated by makeNativesIni.php from $filename\n");
		fputs($fileout, ";\n");
		fputs($fileout, "; Native hashes can be 0xXYZ or XYZ\n");
		fputs($fileout, "; Registered in Lua like:\n");
		fputs($fileout, ";    natives.[category].[name]\n");
#
		fputs($fileout2, "; generated by makeNativesIni.php from $filename\n");
		fputs($fileout2, "; Call-Layout: [parameters] ) [return values]\n");
		fputs($fileout2, ";\n");
		fputs($fileout2, "; Types [case sensitive!]:\n");
		fputs($fileout2, ";   i = int / number\n");
		fputs($fileout2, ";   f = float / number\n");
		fputs($fileout2, ";   b = bool\n");
		fputs($fileout2, ";   v = void ( = no return value)\n");
		fputs($fileout2, ";   V = vector / Vector\n");
		fputs($fileout2, ";   m = CMemoryBlock\n");
		fputs($fileout2, ";\n");
		fputs($fileout2, ";   a/u = any/unknown -> interpreted as int\n");
		fputs($fileout2, ";\n");
		fputs($fileout2, "; You can call natives with call layouts like this:\n");
		fputs($fileout2, ";     natives.[category].[name]([parameters])\n");
# ini file headers
		while(($buffer = fgets($filein, 4096)) !== false)
		{
			$buffer=trim($buffer);
			if(substr($buffer, 0, 9)=="namespace")
			{
				$array=explode(" ", $buffer);
				$buffer=$array[1];
				fputs($fileout, "\n[$buffer]\n");
				fputs($fileout2, "\n[$buffer]\n");
				continue;
			}
			if(substr($buffer, 0, 6)!="static")
				continue;
#
			$name=explode("(", explode(" ", $buffer)[2])[0];
# Line of natives.ini
			$hash=substr(explode("(", $buffer)[2], 0, 18);
			fputs($fileout, "$name=$hash\n");
# Line of native_call_layout.ini
			$return=translate(explode(" ", $buffer)[1]);
			$list=explode(")", explode("(", $buffer)[1])[0];
			$array=explode(", ", $list);
			$parms="";
			foreach($array as $key => $value)
			{
				$parms.=translate(explode(" ", $value)[0]);
			}
			fputs($fileout2, "$name=$parms)$return\n");
		}
		fclose($fileout2);
		fclose($fileout);
		fclose($filein);
		echo("done.\n");
	}
	else
	{
		die("File natives.h not found.\n");
	}
?>